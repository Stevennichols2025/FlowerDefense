@import url('https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap');
body {
  margin: 0;
  overflow: hidden;
  background-color: black;
}

canvas {
  display: block;
  width: 100vw;
  height: 100vh;
  background-color: black;
}

.ball {
  position: absolute;
  display: flex;
  align-items: center;
  justify-content: center;
  transform: translate(-50%, -50%);
  user-select: none;
  line-height: 1;
  animation: ballWobble 2s ease-in-out infinite;
}

.saucer {
  position: absolute;
  font-size: 160px;
}

/* <<< ADDED: Style for Berserk mode >>> */
.saucer.berserk {
  /* Example: Add a red pulsing glow */
  box-shadow: 0 0 30px 15px rgba(255, 0, 0, 0.7);
  animation:
    pulsateRed 0.5s infinite alternate,
    wobble 0.2s infinite; /* Combine animations */
}

/* You might already have this, if not: */
@keyframes pulsateRed {
  from {
    box-shadow: 0 0 20px 10px rgba(255, 0, 0, 0.5);
  }
  to {
    box-shadow: 0 0 40px 20px rgba(255, 50, 50, 0.9);
  }
}

@keyframes wobble {
  0% {
    transform: rotate(0deg);
  }
  25% {
    transform: rotate(-10deg);
  }
  50% {
    transform: rotate(10deg);
  }
  75% {
    transform: rotate(-5deg);
  }
  100% {
    transform: rotate(0deg);
  }
}

@keyframes explode {
  0% {
    transform: translate(0, 0) scale(1);
    opacity: 1;
  }
  100% {
    transform: translate(var(--tx), var(--ty)) scale(0);
    opacity: 0;
  }
}

.explosion-particle {
  position: absolute;
  width: 16px;
  height: 16px;
  background-color: #ff6b6b;
  border-radius: 50%;
  pointer-events: none;
  animation: explode 0.9s ease-out forwards;
}

.wobble {
  animation: wobble 0.3s ease-in-out;
}

#player {
  position: absolute;
  transform: translateX(-50%);
  font-size: 120px;
}

.laser {
  position: absolute;
  /* Let the inline styles handle appearance */
}

.score {
  position: absolute;
  color: #da08ac;
  z-index: 100;
  font-family: 'Press Start 2P', 'Courier New', monospace;
  font-size: 72px;
  text-shadow:
    0 0 10px #2e2d2c,
    0 0 20px #0b020f,
    2px 2px 2px rgba(0, 0, 0, 0.5);
  right: 50px;
  top: 10px;
  letter-spacing: 2px;
}

#pauseButton {
  position: absolute;
  /* Keep vertical centering in the bottom border */
  top: 50%;
  transform: translateY(-50%);
  /* Place it after the rocket launcher */
  left: 220px; /* Changed from 160px to position after rocket launcher */
  font-size: 30px;
  cursor: pointer;
  z-index: 1001;
  background-color: #343a40;
  border-radius: 8px;
  box-shadow:
    inset 0 2px 0 rgba(255, 255, 255, 0.2),
    0 5px 0 #212529,
    0 6px 6px rgba(0, 0, 0, 0.3);
  width: 50px;
  height: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: gold;
  border: none;
  padding: 0;
  pointer-events: auto;
  transition: background-color 0.1s ease;
  outline: none;
}

/* When the game is paused, disable hover effects to prevent accidental resume */
body.game-paused #pauseButton:hover {
  background-color: #343a40; /* Keep original color, don't highlight */
}

#pauseButton:active {
  /* Simulate button press */
  top: calc(50% + 3px);
  box-shadow:
    inset 0 1px 0 rgba(255, 255, 255, 0.2),
    0 2px 0 #212529,
    0 3px 3px rgba(0, 0, 0, 0.3);
  pointer-events: auto; /* Ensure it remains clickable when pressed */
  z-index: 1001; /* Maintain z-index when pressed */
}

#pauseButton:hover {
  background-color: #495057; /* Lighter shade when hovering */
}

.static-flower {
  position: absolute;
  font-size: 50px;
  color: gold;
  transform: translateX(-50%);
  bottom: 25px;
  z-index: 900;
  animation: flowerPulse 1.5s ease-in-out infinite;
  animation-delay: var(--pulse-delay, 0s);
}

#gameOverContainer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  text-align: center;
  display: none;
  z-index: 2000;
}

#gameOverText {
  font-size: 100px;
  color: gold;
  font-family: Arial, sans-serif;
  font-weight: bold;
  text-shadow: 4px 4px 8px rgba(160, 61, 135, 0.884);
  margin-bottom: 30px;
}

#playAgainButton {
  font-size: 30px;
  padding: 15px 40px;
  background-color: rgb(255, 0, 179);
  color: black;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  transition: transform 0.2s;
}

#playAgainButton:hover {
  transform: scale(1.1);
}

@keyframes petal-fall {
  0% {
    transform: translate(0, 0) rotate(0deg);
    opacity: 1;
  }
  100% {
    transform: translate(var(--tx), var(--ty)) rotate(var(--rotation));
    opacity: 0;
  }
}

.petal {
  position: absolute;
  font-size: 20px;
  pointer-events: none;
  animation: petal-fall 1s ease-in forwards;
}

#startGameContainer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 2000;
}

#startGameText {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 48px;
  color: gold;
  font-family: 'Press Start 2P', sans-serif;
  font-weight: bold;
  text-shadow: 4px 4px 4px rgba(185, 11, 171, 0.5);
  width: 100%;
  text-align: center;
}

#startGameButton {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size: 30px;
  padding: 15px 40px;
  background-color: rgb(255, 0, 191);
  color: black;
  border: none;
  border-radius: 10px;
  cursor: pointer;
  transition: transform 0.2s;
  font-family: 'Press Start 2P', sans-serif;
}

#startGameButton:hover {
  transform: translate(-50%, -50%) scale(1.1);
}

#decorativeFlowerRow {
  position: absolute;
  bottom: 20px;
  left: 0;
  width: 100%;
  text-align: center;
  font-size: 50px;
  letter-spacing: 10px;
}

#saucerHealthContainer {
  position: absolute;
  top: 20px; /* Move it down below the border */
  left: 50%;
  transform: translateX(-50%);
  width: 300px;
  height: 20px;
  background-color: rgba(0, 0, 0, 0.5);
  border: 2px solid gold;
  border-radius: 10px;
  overflow: hidden;
  z-index: 2000; /* Increase z-index to be above the border */
}

#saucerHealthBar {
  width: 100%;
  height: 100%;
  background-color: #ff3366;
  transition: width 0.3s ease-out;
  box-shadow: 0 0 10px #ff3366; /* Add a glow effect */
}

@keyframes bigExplosion {
  0% {
    transform: scale(1);
    opacity: 1;
  }
  50% {
    transform: scale(2);
    opacity: 0.8;
  }
  100% {
    transform: scale(3);
    opacity: 0;
  }
}

@keyframes saucerDefeat {
  0% {
    transform: translate(0, 0) rotate(0deg);
  }
  25% {
    transform: translate(100px, -50px) rotate(45deg);
  }
  50% {
    transform: translate(200px, -100px) rotate(90deg);
  }
  75% {
    transform: translate(300px, -150px) rotate(135deg);
  }
  100% {
    transform: translate(400px, -200px) rotate(180deg);
  }
}

.big-explosion {
  position: absolute;
  width: 400px;
  height: 400px;
  background: radial-gradient(
    circle,
    #ff6b6b 0%,
    #ff3366 50%,
    transparent 100%
  );
  border-radius: 50%;
  pointer-events: none;
  animation: bigExplosion 1s ease-out forwards;
  box-shadow:
    0 0 50px #ff3366,
    0 0 100px #ff6b6b;
}

.saucer-defeat {
  animation: saucerDefeat 2s ease-in forwards;
}

#levelMessageContainer {
  position: absolute;
  top: 220px; /* 200px below the health bar */
  left: 50%;
  transform: translateX(-50%);
  text-align: center;
  z-index: 2000;
  font-family: 'Press Start 2P', sans-serif;
  width: 100%;
  height: 60px;
  overflow: hidden;
}

.message-container {
  position: relative;
  width: 100%;
  height: 60px;
  margin: 0;
}

.level-message {
  font-size: 36px;
  color: gold;
  text-shadow:
    0 0 10px #ff3366,
    0 0 20px #ff3366;
  opacity: 0;
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
  white-space: nowrap;
}

@keyframes fadeInOut {
  0% {
    opacity: 0;
    transform: translateX(-50%) scale(0.8);
  }
  20% {
    opacity: 1;
    transform: translateX(-50%) scale(1.1);
  }
  100% {
    opacity: 1;
    transform: translateX(-50%) scale(1);
  }
}

/* Create a new animation for level number messages that stays visible */
@keyframes fadeInStay {
  0% {
    opacity: 0;
    transform: translateX(-50%) scale(0.8);
  }
  20% {
    opacity: 1;
    transform: translateX(-50%) scale(1.1);
  }
  100% {
    opacity: 1;
    transform: translateX(-50%) scale(1);
  }
}

@keyframes ballWobble {
  0% {
    transform: translate(-50%, -50%) rotate(0deg);
  }
  25% {
    transform: translate(-50%, -50%) rotate(-10deg);
  }
  75% {
    transform: translate(-50%, -50%) rotate(10deg);
  }
  100% {
    transform: translate(-50%, -50%) rotate(0deg);
  }
}

@keyframes flowerPulse {
  0% {
    transform: translateX(-50%) scale(1);
    text-shadow: 0 0 10px rgba(255, 223, 0, 0.5);
  }
  50% {
    transform: translateX(-50%) scale(1.1);
    text-shadow: 0 0 20px rgba(255, 223, 0, 0.8);
  }
  100% {
    transform: translateX(-50%) scale(1);
    text-shadow: 0 0 10px rgba(255, 223, 0, 0.5);
  }
}

.border-overlay {
  z-index: 1000;
  /* Make borders visible with semi-transparent backgrounds */
  background-color: rgba(255, 255, 255, 0.5);
  /* Position for effects */
  overflow: hidden;
  /* Add a light outline to clearly see boundaries */
  outline: 1px solid rgba(255, 255, 255, 0.7);
  box-sizing: border-box;
}

/* Individual overlay styles for specific effects */
#leftBorderOverlay {
  background-color: rgba(255, 0, 0, 0.5); /* Red for left border */
}

#rightBorderOverlay {
  background-color: rgba(0, 255, 0, 0.5); /* Green for right border */
}

#topBorderOverlay {
  background-color: rgba(0, 0, 255, 0.5); /* Blue for top border */
}

#bottomLeftOverlay {
  background-color: rgba(255, 255, 0, 0.5); /* Yellow for bottom left */
}

#bottomRightOverlay {
  background-color: rgba(255, 0, 255, 0.5); /* Purple for bottom right */
}

/* Border overlay animations */
@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes energyFlow {
  from {
    background-position: 0 -50px;
  }
  to {
    background-position: 0 100%;
  }
}

/* Border particle styles */
.border-particle {
  pointer-events: none;
  z-index: 1001;
}

/* Styles for DIV-based Game Borders */
.game-border {
  position: absolute;
  background-color: gold; /* Or your desired border color */
  z-index: -1; /* Place behind game elements but above canvas bg */
  box-sizing: border-box; /* Include border/padding in size */
  pointer-events: none; /* Make non-interactive */
}

#border-top {
  top: 0;
  left: 0;
  width: 100%;
  /* Height will be set dynamically via JS */
}

#border-left {
  top: 0;
  left: 0;
  height: 100%;
  /* Width will be set dynamically via JS */
}

#border-right {
  top: 0;
  right: 0; /* Position from right edge */
  height: 100%;
  /* Width will be set dynamically via JS */
  /* Note: Handling the bottom extension might require a pseudo-element 
       or adjusting height dynamically if precise visual match is needed */
}

#border-bottom-left {
  bottom: 0; /* Position from bottom edge */
  left: 0;
  /* Width and Height will be set dynamically via JS */
}

#border-bottom-right {
  bottom: 0; /* Position from bottom edge */
  right: 0;
  /* Width and Height will be set dynamically via JS */
}

/* Bonus box styles */
.bonus {
  background-color: purple;
  color: gold;
  border: 2px solid gold;
  border-radius: 5px;
  display: flex; /* For centering text */
  align-items: center;
  justify-content: center;
  font-weight: bold;
  box-shadow: 0 0 10px gold; /* Add a glow */
  z-index: 500; /* Ensure it's above borders but potentially below UI */
  position: absolute; /* Needs to be absolute for JS positioning */
}

/* Beehive Defense Icon */
#beehiveDefenseIcon {
  /* Basic Button Resets */
  background: none;
  border: none;
  padding: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: inherit;

  /* Allow clicks despite parent having pointer-events: none */
  pointer-events: auto;

  /* Existing Styles */
  position: absolute;
  /* Centering Vertically within the parent (border-bottom-right) */
  top: 50%;
  transform: translateY(-50%);
  /* Positioning Horizontally */
  left: 40px; /* Adjust this value to position relative to the start of the border segment */
  width: 50px; /* Button width */
  height: 50px; /* Button height */
  background-color: #f0ad4e; /* Orange button color */
  border-radius: 8px;
  box-shadow:
        /* Top highlight */
    inset 0 2px 0 rgba(255, 255, 255, 0.4),
    /* Bottom shadow */ 0 5px 0 #d9983a,
    /* General shadow */ 0 6px 6px rgba(0, 0, 0, 0.3);
  color: #fff;
  font-size: 28px; /* Adjust emoji size */
  text-align: center;
  line-height: 50px; /* Vertically center emoji */
  transition: all 0.1s ease-out;
  z-index: 1001; /* Ensure it's above other elements like canvas/particles */
}

#beehiveDefenseIcon:active {
  /* Simulate button press */
  top: calc(50% + 3px); /* Move down slightly */
  box-shadow:
    inset 0 1px 0 rgba(255, 255, 255, 0.4),
    0 2px 0 #d9983a,
    0 3px 3px rgba(0, 0, 0, 0.3);
}

#beehiveDefenseIcon.cooldown {
  background-color: #aaa; /* Greyed out color */
  box-shadow:
    inset 0 2px 0 rgba(180, 180, 180, 0.4),
    0 5px 0 #888,
    0 6px 6px rgba(0, 0, 0, 0.3);
  cursor: not-allowed;
}

#beehiveDefenseIcon.cooldown:active {
  /* Prevent active state during cooldown */
  top: 50%;
  box-shadow:
    inset 0 2px 0 rgba(180, 180, 180, 0.4),
    0 5px 0 #888,
    0 6px 6px rgba(0, 0, 0, 0.3);
}

/* Optional: Add a hover effect */
#beehiveDefenseIcon:not(.cooldown):hover {
  background-color: #ec971f;
  box-shadow:
    inset 0 2px 0 rgba(255, 255, 255, 0.5),
    0 5px 0 #d98a18,
    0 6px 8px rgba(0, 0, 0, 0.35);
}

/* Individual Bee Style */
.bee {
  position: absolute;
  font-size: 18px; /* Adjust size as needed */
  pointer-events: none; /* Bees aren't clickable */
  z-index: 2000; /* Above bonuses, below icon/UI */
  /* Animation/movement handled by JS */
}

/* Restore original layout styles and add flex for centering */
#rocketLauncherIcon {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 160px; /* Changed from 100px to position after beehive and triple laser */
  width: 50px;
  height: 50px;
  background-color: #6c757d;
  border: none;
  border-radius: 8px;
  box-shadow:
    inset 0 2px 0 rgba(255, 255, 255, 0.2),
    0 5px 0 #495057,
    0 6px 6px rgba(0, 0, 0, 0.3);
  color: #fff;
  font-size: 24px;
  cursor: default;
  z-index: 1001;

  /* Added for centering the inner span */
  display: flex;
  align-items: center;
  justify-content: center;
}

/* Rotate ONLY the emoji span inside the button */
#rocketLauncherIcon .rocket-emoji {
  display: inline-block; /* Needed for transform */
  transform: rotate(-45deg);
  line-height: 1; /* Adjust line-height for rotated element */
}

#rocketCount {
  position: absolute;
  bottom: -5px;
  right: -5px;
  background-color: rgba(7, 112, 29, 0.9); /* Red background */
  color: white;
  font-size: 14px;
  font-weight: bold;
  border-radius: 50%;
  width: 22px;
  height: 22px;
  line-height: 22px;
  text-align: center;
  font-family: Arial, sans-serif; /* Use a standard font */
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
}
#tripleLaserIcon {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  left: 100px;
  width: 50px;
  height: 50px;
  background-color: rgba(60, 217, 228, 0.829);
  box-shadow:
    inset 0 2px 0 rgba(255, 255, 255, 0.2),
    0 5px 0 #0cc,
    0 6px 6px rgba(0, 0, 0, 0.3),
    0 0 10px #0ff;
  border: none;
  border-radius: 8px;
  color: #fff;
  font-size: 24px;
  cursor: default;
  z-index: 1001;
  display: flex;
  align-items: center;
  justify-content: center;
}

#tripleLaserCount {
  position: absolute;
  bottom: -5px;
  right: -5px;
  background-color: rgba(7, 112, 29, 0.9); /* Red background */
  color: white;
  font-size: 14px;
  font-weight: bold;
  border-radius: 50%;
  width: 22px;
  height: 22px;
  line-height: 22px;
  text-align: center;
  font-family: Arial, sans-serif; /* Use a standard font */
  box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
}
/* --- Rocket Projectile Style --- */
.rocket {
  position: absolute;
  font-size: 30px; /* Base size for container */
  /* ONLY handle horizontal centering, NO rotation here */
  transform: translateX(-50%);
  z-index: 1500;
  display: inline-block;
  /* Remove width/height if they interfere, let content size it */
  /* line-height: 1; Ensures container doesn't add extra space */
}

/* NEW: Style for the inner span holding the emoji */
.rocket .rocket-visual {
  display: inline-block; /* Important for transform */
  transform: rotate(-45deg); /* Apply rotation ONLY to the visual part */
  line-height: 1; /* Prevent span from affecting container height */
}

/* --- Flame Effect for Rocket --- */
/* This should now work correctly relative to the unrotated .rocket div */
.rocket::after {
  content: '';
  position: absolute;
  top: 85%;
  left: 50%;
  /* transform: translateX(-50%); /* Centering */
  /* Let's try slightly different positioning now that parent isn't rotated */
  transform: translateX(-50%) translateY(2px); /* Nudge down slightly */
  width: 12px;
  height: 25px;
  background: linear-gradient(to top, red, orange, yellow);
  border-radius: 0 0 50% 50%;
  z-index: -1;
  animation: rocketFlame 0.1s infinite alternate;
}

/* --- Rocket Flame Animation --- */
@keyframes rocketFlame {
  0% {
    /* Adjust transform origin slightly if needed? */
    transform: translateX(-50%) translateY(2px) scaleY(1) scaleX(1);
    opacity: 1;
  }
  50% {
    transform: translateX(-50%) translateY(2px) scaleY(0.8) scaleX(1.1);
    opacity: 0.8;
  }
  100% {
    transform: translateX(-50%) translateY(2px) scaleY(1.1) scaleX(0.9);
    opacity: 1;
  }
}

/* --- Rocket Explosion Style (Placeholder) --- */
.rocket-explosion {
  position: absolute;
  width: 100px; /* Example size - will be set by JS */
  height: 100px;
  background-color: rgba(255, 100, 0, 0.7);
  border-radius: 50%;
  transform: translate(-50%, -50%);
  animation: rocketExplosionAnim 0.4s ease-out forwards;
  z-index: 1600; /* Above rockets */
  pointer-events: none;
}

@keyframes rocketExplosionAnim {
  0% {
    transform: translate(-50%, -50%) scale(0.1);
    opacity: 1;
  }
  100% {
    transform: translate(-50%, -50%) scale(1);
    opacity: 0;
  }
}

/* --- Rocket Explosion Animation Keyframes --- */
@keyframes rocketExplosionCore {
  0% {
    width: 0;
    height: 0;
    opacity: 1;
  }
  50% {
    width: 30px;
    height: 30px;
    opacity: 1;
  }
  100% {
    width: 40px;
    height: 40px;
    opacity: 0;
  }
}

@keyframes rocketShockwave {
  0% {
    width: 0;
    height: 0;
    border-width: 5px; /* Thinner initial border */
    opacity: 0.8;
  }
  100% {
    width: 80%; /* Don't expand to full container width */
    height: 80%; /* Don't expand to full container height */
    border-width: 1px;
    opacity: 0;
  }
}

@keyframes rocketParticle1 {
  0% {
    transform: translate(-50%, -50%);
    opacity: 1;
  }
  100% {
    transform: translate(calc(-50% + var(--tx)), calc(-50% + var(--ty)));
    opacity: 0;
  }
}

@keyframes rocketParticle2 {
  0% {
    transform: translate(-50%, -50%);
    opacity: 1;
  }
  70% {
    opacity: 0.8;
  }
  100% {
    transform: translate(calc(-50% + var(--tx)), calc(-50% + var(--ty)));
    opacity: 0;
  }
}

@keyframes rocketParticle3 {
  0% {
    transform: translate(-50%, -50%);
    opacity: 1;
  }
  50% {
    opacity: 0.9;
  }
  100% {
    transform: translate(calc(-50% + var(--tx)), calc(-50% + var(--ty)));
    opacity: 0;
  }
}

/* Controls Legend Styling */
#controlsLegend {
  position: absolute;
  top: 60%;
  left: 50%;
  transform: translateX(-50%);
  width: 350px;
  background-color: rgba(0, 0, 0, 0.7);
  border: 2px solid gold;
  border-radius: 10px;
  padding: 15px 20px;
  text-align: left;
  font-family: 'Press Start 2P', sans-serif;
  font-size: 14px;
  color: white;
  z-index: 2001;
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
}

.control-item {
  margin: 10px 0;
  display: flex;
  align-items: center;
}

.control-item:first-child {
  margin-top: 0;
}

.control-item:last-child {
  margin-bottom: 0;
}

.control-item span {
  margin-left: 15px;
  color: gold;
}

/* --- Rocket-Saucer Hit Explosion --- */
@keyframes energyBurst {
  0% {
    width: 0;
    height: 0;
    opacity: 1;
  }
  50% {
    width: 50px;
    height: 50px;
    opacity: 0.9;
  }
  100% {
    width: 70px;
    height: 70px;
    opacity: 0;
  }
}

@keyframes electricalArc {
  0% {
    height: 0;
    opacity: 1;
  }
  50% {
    height: 40px;
    opacity: 0.8;
    transform: translate(-50%, -50%) rotate(calc(45deg * var(--index)))
      scaleY(1);
  }
  100% {
    height: 60px;
    opacity: 0;
    transform: translate(-50%, -50%) rotate(calc(45deg * var(--index)))
      scaleY(0.8);
  }
}

@keyframes rocketSaucerParticle {
  0% {
    transform: translate(-50%, -50%);
    opacity: 1;
  }
  70% {
    opacity: 0.7;
  }
  100% {
    transform: translate(calc(-50% + var(--tx)), calc(-50% + var(--ty)));
    opacity: 0;
  }
}

/* Make the rocket-saucer hit have a unique style */
.rocket-saucer-hit {
  pointer-events: none;
  z-index: 1550;
}

.energy-burst {
  filter: blur(2px);
}

.electrical-arc {
  filter: blur(1px);
}

.rocket-saucer-particle {
  filter: blur(1px);
}
